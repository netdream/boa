#!/bin/bash

PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin
SHELL=/bin/bash

branch="2.4.x-dev"
cluster="BOA-2.4.3"
devel="2.4.x-dev"
legacy="BOA-2.2.9"
master="master"
stable="BOA-2.4.3"

barCnf="/root/.barracuda.cnf"
barName="BARRACUDA.sh.txt"
bldPth="/opt/tmp/boa"
crlGet="-L --max-redirs 10 -k -s --retry 10 --retry-delay 5 -A iCab"
filIncB="barracuda.sh.cnf"
filIncO="octopus.sh.cnf"
gCb="git clone --branch"
octName="OCTOPUS.sh.txt"
pthIncB="lib/settings/${filIncB}"
pthIncO="lib/settings/${filIncO}"
rgUrl="https://raw.githubusercontent.com/omega8cc/boa"
vBs="/var/backups"

_TODAY=$(date +%y%m%d 2>&1)
_NOW=$(date +%y%m%d-%H%M 2>&1)
_CHECK_HOST=$(uname -n 2>&1)
_LOG_DIR="${vBs}/reports/up/$(basename "$0")/${_TODAY}"
_L_VMFAMILY=XEN
_L_VM_TEST=$(uname -a 2>&1)
if [[ "${_L_VM_TEST}" =~ "3.6.14-beng" ]] \
  || [ -e "/root/.debug.cnf" ] \
  || [[ "${_L_VM_TEST}" =~ "3.6.15-beng" ]]; then
  _L_VMFAMILY="VS"
fi

clean_pid_exit() {
  rm -f /var/run/boa_wait.pid
  rm -f /var/run/boa_run.pid
  service cron start &> /dev/null
  exit 1
}

fix_dns_settings() {
  dnsLi="/root/.local.dns.IP.list"
  mkdir -p ${vBs}
  rm -f ${vBs}/resolv.conf.tmp
  if [ -e "/etc/resolv.conf" ]; then
    cp -a /etc/resolv.conf ${vBs}/resolv.conf.tmp
  fi
  if [ ! -e "${vBs}/resolv.conf.vanilla" ]; then
    for Pre in `ls -la ${vBs}/resolv.conf.pre-*`; do
      if [ -e "${Pre}" ] && [ -f "${Pre}" ] && [ ! -L "${Pre}" ]; then
        cp -a ${Pre} ${vBs}/resolv.conf.vanilla
      fi
    done
  fi
  if [ ! -e "${vBs}/resolv.conf.vanilla" ] \
    && [ -e "${vBs}/resolv.conf.tmp" ] ; then
    if [ "${_USE_DEFAULT_DNS}" != "YES" ]; then
      rm -f /etc/resolv.conf
      cp -a ${vBs}/resolv.conf.tmp /etc/resolv.conf
      cp -a ${vBs}/resolv.conf.tmp ${vBs}/resolv.conf.vanilla
    fi
  fi
  sed -i "/^$/d" ${vBs}/resolv.conf.vanilla &> /dev/null
  if [ -e "${vBs}/resolv.conf.vanilla" ]; then
    if [ "${_USE_DEFAULT_DNS}" != "YES" ]; then
      rm -f /etc/resolv.conf
      cp -a ${vBs}/resolv.conf.vanilla /etc/resolv.conf
    fi
  else
    if [ -e "${vBs}/resolv.conf.tmp" ] \
      && [ "${_USE_DEFAULT_DNS}" != "YES" ]; then
      rm -f /etc/resolv.conf
      cp -a ${vBs}/resolv.conf.tmp /etc/resolv.conf
    fi
  fi
  if [ -e "/etc/pdnsd.conf" ]; then
    if [ -e "${dnsLi}" ]; then
      sed -i "s/.*127.0.0.1.*//g; s/ *$//g; /^$/d" ${dnsLi}
      sed -i "s/.*Dynamic.*//g; s/ *$//g; /^$/d"   ${dnsLi}
      _BROKEN_DNS_TEST_X=$(grep "\." ${dnsLi} 2>&1)
      if [ -z "${_BROKEN_DNS_TEST_X}" ]; then
        echo "        label = \"google-servers\";" > ${dnsLi}
        echo "        ip=8.8.8.8;" >> ${dnsLi}
        echo "        ip=8.8.4.4;" >> ${dnsLi}
      fi
    fi
    _CUSTOM_DNS_TEST=$(grep 8.8.8.8 /etc/pdnsd.conf 2>&1)
    _BROKEN_DNS_CONF=$(grep "ip=Dynamic" /etc/pdnsd.conf 2>&1)
    if [[ "${_CUSTOM_DNS_TEST}" =~ "8.8.8.8" ]] \
      || [ -e "/root/.use.default.nameservers.cnf" ] \
      || [ -e "/root/.use.local.nameservers.cnf" ] \
      || [[ "${_BROKEN_DNS_CONF}" =~ "Dynamic" ]]; then
      echo "        label = \"google-servers\";" > ${dnsLi}
      for _IP in `cat /etc/resolv.conf \
        | sed 's/.*127.0.0.1.*//g; s/.*Dynamic.*//g' \
        | cut -d ' ' -f2 \
        | sort \
        | uniq`;do echo "        ip=${_IP};" >> ${dnsLi};done
      sed -i "s/ip=.*//g; s/ *$//g; /^$/d" /etc/pdnsd.conf
      sed -i "s/.*127.0.0.1.*//g; s/ *$//g; /^$/d" ${dnsLi}
      sed -i "s/.*Dynamic.*//g; s/ *$//g; /^$/d"   ${dnsLi}
      _BROKEN_DNS_TEST_Y=$(grep "\." ${dnsLi} 2>&1)
      if [ -z "${_BROKEN_DNS_TEST_Y}" ]; then
         echo "        ip=8.8.8.8;" >> ${dnsLi}
         echo "        ip=8.8.4.4;" >> ${dnsLi}
      fi
      ### echo debug dns A
      sed -i '/        label = \"google-servers\";/ {r /root/.local.dns.IP.list
d;};' /etc/pdnsd.conf
      resolvconf -u         &> /dev/null
      service pdnsd restart &> /dev/null
      pdnsd-ctl empty-cache &> /dev/null
    fi
  fi
}

check_dns_settings() {
  if [ -e "/root/.use.default.nameservers.cnf" ]; then
    _USE_DEFAULT_DNS=YES
    rm -f /root/.local.dns.IP.list
  fi
  if [ -e "/root/.use.local.nameservers.cnf" ]; then
    _USE_PROVIDER_DNS=YES
  else
    _REMOTE_DNS_TEST=$(host -a files.aegir.cc 8.8.8.8 -w 10 2>&1)
  fi
  if [[ "${_REMOTE_DNS_TEST}" =~ "no servers could be reached" ]] \
    || [ "${_USE_DEFAULT_DNS}" = "YES" ] \
    || [ "${_USE_PROVIDER_DNS}" = "YES" ]; then
    _CTRL_DNS_TEST=$(host -a files.aegir.cc 2>&1)
    if [[ ! "${_CTRL_DNS_TEST}" =~ "104.245.208.226" ]] \
      || [ "${_USE_DEFAULT_DNS}" = "YES" ] \
      || [ "${_USE_PROVIDER_DNS}" = "YES" ] \
      || [ ! -e "${vBs}/resolv.conf.vanilla" ]; then
      fix_dns_settings
    fi
  fi
}

extract_archive() {
  if [ ! -z "$1" ]; then
    case $1 in
      *.tar.bz2)   tar xjf $1    ;;
      *.tar.gz)    tar xzf $1    ;;
      *.bz2)       bunzip2 $1    ;;
      *.rar)       unrar x $1    ;;
      *.gz)        gunzip -q $1  ;;
      *.tar)       tar xf $1     ;;
      *.tbz2)      tar xjf $1    ;;
      *.tgz)       tar xzf $1    ;;
      *.zip)       unzip -qq $1  ;;
      *.Z)         uncompress $1 ;;
      *.7z)        7z x $1       ;;
      *)           echo "'$1' cannot be extracted via >extract<" ;;
    esac
    rm -f $1
  fi
}

get_dev_ext() {
  if [ ! -z "$1" ]; then
    curl ${crlGet} "${urlDev}/HEAD/$1" -o "$1"
    extract_archive "$1"
  fi
}

send_report() {
  if [ -e "${barCnf}" ]; then
    source ${barCnf}
    if [ -e "/root/.auto.up.cnf" ] \
      || [ -e "/root/.host8.cnf" ] \
      || [[ "${_CHECK_HOST}" =~ ".host8." ]] \
      || [[ "${_CHECK_HOST}" =~ ".boa.io" ]] \
      || [ "${_L_VMFAMILY}" = "VS" ]; then
      _MY_EMAIL="$(basename "$0")@omega8.cc"
    fi
    if [ ! -z "${_MY_EMAIL}" ]; then
      repSub="Successful Octopus upgrade for ${octUsr}"
      repSub="REPORT: ${repSub} on ${_CHECK_HOST}"
      repSub=$(echo -n ${repSub} | fmt -su -w 2500 2>&1)
      cat ${_UP_LOG} | mail -e -s "${repSub} at ${_NOW}" ${_MY_EMAIL}
      echo "${repSub} sent to ${_MY_EMAIL}"
    fi
  fi
}

send_alert() {
  if [ -e "${barCnf}" ]; then
    source ${barCnf}
    if [ -e "/root/.auto.up.cnf" ] \
      || [ -e "/root/.host8.cnf" ] \
      || [[ "${_CHECK_HOST}" =~ ".host8." ]] \
      || [[ "${_CHECK_HOST}" =~ ".boa.io" ]] \
      || [ "${_L_VMFAMILY}" = "VS" ]; then
      _MY_EMAIL="$(basename "$0")@omega8.cc"
    fi
    if [ ! -z "${_MY_EMAIL}" ]; then
      repSub="ALERT: Failed Octopus upgrade for ${octUsr} on ${_CHECK_HOST}"
      repSub=$(echo -n ${repSub} | fmt -su -w 2500 2>&1)
      cat ${_UP_LOG} | mail -e -s "${repSub} at ${_NOW}" ${_MY_EMAIL}
      echo "${repSub} sent to ${_MY_EMAIL}"
    fi
  fi
}

check_report() {
  _SEND_ALERT=NO
  _RESULT_BYE=$(grep "BYE" ${_UP_LOG} 2>&1)
  if [[ "${_RESULT_BYE}" =~ "BYE" ]]; then
    _DO_NOTHING=YES
  else
    _SEND_ALERT=YES
  fi
  _RESULT_ALRT=$(grep "ALRT" ${_UP_LOG} 2>&1)
  if [[ "${_RESULT_ALRT}" =~ "ALRT" ]]; then
    _SEND_ALERT=YES
  fi
  _RESULT_ABORTING=$(grep "Aborting" ${_UP_LOG} 2>&1)
  if [[ "${_RESULT_ABORTING}" =~ "Aborting" ]]; then
    _SEND_ALERT=YES
  fi
  _RESULT_ALREADY=$(grep "This Aegir Instance is already up" ${_UP_LOG} 2>&1)
  if [[ "${_RESULT_ALREADY}" =~ "This Aegir Instance is already up" ]]; then
    _SEND_ALERT=NO
  fi
  if [ "${_SEND_ALERT}" = "YES" ]; then
    send_alert
  else
    send_report
  fi
}

up_mode() {
  if [ "${mcmode}" = "aegir" ]; then
    sed -i "s/^_HM_ONLY=NO/_HM_ONLY=YES/g"                     ${octCnf}
    sed -i "s/^_HM_ONLY=NO/_HM_ONLY=YES/g"                     ${vBs}/${tocName}
    if [ -e "${vBs}/${tocIncO}" ]; then
      sed -i "s/^_HM_ONLY=NO/_HM_ONLY=YES/g"                   ${vBs}/${tocIncO}
    fi
    bash  ${vBs}/${tocName}
    touch ${User}/log/up-${_TODAY}
  elif [ "${mcmode}" = "platforms" ]; then
    sed -i "s/^_PLATFORMS_ONLY=NO/_PLATFORMS_ONLY=YES/g"       ${octCnf}
    sed -i "s/^_PLATFORMS_ONLY=NO/_PLATFORMS_ONLY=YES/g"       ${vBs}/${tocName}
    if [ -e "${vBs}/${tocIncO}" ]; then
      sed -i "s/^_PLATFORMS_ONLY=NO/_PLATFORMS_ONLY=YES/g"     ${vBs}/${tocIncO}
    fi
    bash  ${vBs}/${tocName}
    touch ${User}/log/up-${_TODAY}
  elif [ "${mcmode}" = "both" ]; then
    sed -i "s/^_HM_ONLY=YES/_HM_ONLY=NO/g"                     ${octCnf}
    sed -i "s/^_HM_ONLY=YES/_HM_ONLY=NO/g"                     ${vBs}/${tocName}
    sed -i "s/^_PLATFORMS_ONLY=YES/_PLATFORMS_ONLY=NO/g"       ${octCnf}
    sed -i "s/^_PLATFORMS_ONLY=YES/_PLATFORMS_ONLY=NO/g"       ${vBs}/${tocName}
    if [ -e "${vBs}/${tocIncO}" ]; then
      sed -i "s/^_HM_ONLY=YES/_HM_ONLY=NO/g"                   ${vBs}/${tocIncO}
    fi
    if [ -e "${vBs}/${tocIncO}" ]; then
      sed -i "s/^_PLATFORMS_ONLY=YES/_PLATFORMS_ONLY=NO/g"     ${vBs}/${tocIncO}
    fi
    bash  ${vBs}/${tocName}
    touch ${User}/log/up-${_TODAY}
  else
    sed -i "s/^_HM_ONLY=YES/_HM_ONLY=NO/g"                     ${octCnf}
    sed -i "s/^_PLATFORMS_ONLY=YES/_PLATFORMS_ONLY=NO/g"       ${octCnf}
    bash  ${vBs}/${tocName}
    touch ${User}/log/up-${_TODAY}
  fi
}

up_one() {
  if [ -e "${vBs}/${octName}" ]; then
    cp -af ${vBs}/${octName}  ${vBs}/${tocName}
    if [ -e "${vBs}/${filIncO}" ]; then
      cp -af ${vBs}/${filIncO}  ${vBs}/${tocIncO}
    fi
    if [ "${cmmand}" = "up-head" ]; then
      sed -i "s/^_BRANCH_PRN=.*/_BRANCH_PRN=${devel}/g"        ${vBs}/${tocIncO}
    elif [ "${cmmand}" = "up-modern" ]; then
      sed -i "s/^_BRANCH_PRN=.*/_BRANCH_PRN=${devel}/g"        ${vBs}/${tocIncO}
    else
      if [ -e "${vBs}/${tocIncO}" ]; then
        sed -i "s/^_BRANCH_PRN=.*/_BRANCH_PRN=${branch}/g"     ${vBs}/${tocIncO}
      fi
      ### Legacy method
      sed -i "s/^_BRANCH_PRN=.*/_BRANCH_PRN=${branch}/g"       ${vBs}/${tocName}
      sed -i "s/^_BRANCH_PRO.*/_BRANCH_PROVISION=${branch}/g"  ${vBs}/${tocName}
    fi
    if [ "${cmmand}" = "up-head" ]; then
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=${master}/g"       ${vBs}/${tocIncO}
    elif [ "${cmmand}" = "up-modern" ]; then
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=${devel}/g"        ${vBs}/${tocIncO}
    elif [ "${cmmand}" = "up-cluster" ]; then
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=${cluster}/g"      ${vBs}/${tocIncO}
    else
      if [ -e "${vBs}/${tocIncO}" ]; then
        sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=${branch}/g"     ${vBs}/${tocIncO}
      fi
      ### Legacy method
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=${branch}/g"       ${vBs}/${tocName}
    fi
    if [ -e "${vBs}/${tocIncO}" ]; then
      sed -i "s/^_AUTOPILOT=NO/_AUTOPILOT=YES/g"               ${vBs}/${tocIncO}
      sed -i "s/^_DNS_SETUP_TEST=YES/_DNS_SETUP_TEST=NO/g"     ${vBs}/${tocIncO}
    fi
    sed -i "s/^_USER=o1/_USER=${octUsr}/g"                     ${vBs}/${tocName}
    ### Legacy method
    sed -i "s/^_AUTOPILOT=NO/_AUTOPILOT=YES/g"                 ${vBs}/${tocName}
    sed -i "s/^_DNS_SETUP_TEST=YES/_DNS_SETUP_TEST=NO/g"       ${vBs}/${tocName}
    if [ -e "/root/.auto.up.cnf" ] \
      || [ -e "/root/.host8.cnf" ] \
      || [[ "${_CHECK_HOST}" =~ ".host8." ]] \
      || [[ "${_CHECK_HOST}" =~ ".boa.io" ]] \
      || [ "${_L_VMFAMILY}" = "VS" ]; then
      if [ -e "/root/.debug.cnf" ] && [ ! -e "/root/.default.cnf" ]; then
        _DO_NOTHING=YES
      else
        if [ -e "${vBs}/${tocIncO}" ]; then
          sed -i "s/^_STRONG_PASSW.*/_STRONG_PASSWORDS=YES/g"  ${vBs}/${tocIncO}
          sed -i "s/^_PLATFORMS_LIST=.*/_PLATFORMS_LIST=ALL/g" ${vBs}/${tocIncO}
        fi
        ### Legacy method
        sed -i "s/^_STRONG_PASSW.*/_STRONG_PASSWORDS=YES/g"    ${vBs}/${tocName}
        sed -i "s/^_PLATFORMS_LIST=.*/_PLATFORMS_LIST=ALL/g"   ${vBs}/${tocName}
        sed -i "s/^_PLATFORMS_LIST=.*/_PLATFORMS_LIST=ALL/g"   ${octCnf}
        sed -i "s/^_AUTOPILOT=NO/_AUTOPILOT=YES/g"             ${octCnf}
        sed -i "s/^_DNS_SETUP_TEST=YES/_DNS_SETUP_TEST=NO/g"   ${octCnf}
        sed -i "s/^_STRONG_PASSW.*/_STRONG_PASSWORDS=YES/g"    ${octCnf}
      fi
    fi
    if [ -e "${vBs}/${tocName}" ]; then
      if [ -e "${User}/.drush/sys/provision" ]; then
        _IS_OLD=$(find ${User}/.drush/sys/provision/ \
          -maxdepth 1 -mindepth 1 -mtime +0 -type d | grep example)
      elif [ -e "${User}/.drush/provision" ]; then
        _IS_OLD=$(find ${User}/.drush/provision/ \
          -maxdepth 1 -mindepth 1 -mtime +0 -type d | grep example)
      fi
      if [ -z "${_IS_OLD}" ] \
        && [ -z "${mcmode}" ] \
        && [ -e "${User}/.drush/sys/provision" ]; then
        echo
        echo "This Aegir Instance is already up to date!"
        echo "If you wish to run/force the upgrade again,"
        echo "please specify desired upgrade mode:"
        echo "aegir, platforms or both - as shown below"
        echo
        echo "Usage: $(basename "$0") ${cmmand} ${second} {aegir|platforms|both}"
        echo
      else
        if [ -e "${User}/.drush/sys/provision" ]; then
          up_mode
        elif [ -e "${User}/.drush/provision" ]; then
          up_mode
        else
          echo "${User}/.drush/sys/provision does not exist!"
          rm -f -r ${User}/.drush/{sys,xts,usr}
          rm -f -r ${User}/.drush/{provision,drush_make}
          mkdir -p ${User}/.drush/{sys,xts,usr}
          ${gCb} ${devel} https://github.com/omega8cc/provision.git \
            ${User}/.drush/sys/provision &> /dev/null
          chown -R ${octUsr}:users ${User}/.drush/sys
          up_mode
        fi
      fi
      if [ -e "${User}/log/cores.txt" ] \
        && [ ! -e "${User}/log/CANCELLED" ]; then
        if [ -e "${User}/.drush/bm.patch" ] \
          && [ ! -e "${User}/.drush/sys/bm.patch" ] \
          && [ -e "${User}/.drush/sys" ]; then
          mv -f ${User}/.drush/bm.patch \
            ${User}/.drush/sys/bm.patch
        fi
        if [ -e "${User}/.drush/sys/bm.patch" ]; then
          cd ${User}/.drush/sys
          patch -p1 < bm.patch &> /dev/null
        fi
        if [ -e "${User}/.drush/custom.patch" ] \
          && [ ! -e "${User}/.drush/sys/custom.patch" ] \
          && [ -e "${User}/.drush/sys" ]; then
          mv -f ${User}/.drush/custom.patch \
            ${User}/.drush/sys/custom.patch
        fi
        if [ -e "${User}/.drush/sys/custom.patch" ]; then
          cd ${User}/.drush/sys
          patch -p1 < custom.patch &> /dev/null
        fi
        if [ -e "${User}/.drush/uberdrupal.patch" ] \
          && [ ! -e "${User}/.drush/sys/uberdrupal.patch" ] \
          && [ -e "${User}/.drush/sys" ]; then
          mv -f ${User}/.drush/uberdrupal.patch \
            ${User}/.drush/sys/uberdrupal.patch
        fi
        if [ -e "${User}/.drush/sys/uberdrupal.patch" ]; then
          cd ${User}/.drush/sys
          patch -p1 < uberdrupal.patch &> /dev/null
        fi
        cd ${vBs}
      fi
    else
      echo "${vBs}/${tocName} installer not available - try again"
      clean_pid_exit
    fi
  fi
}

count_cpu() {
  _CPU_INFO=$(grep -c processor /proc/cpuinfo 2>&1)
  _CPU_INFO=${_CPU_INFO//[^0-9]/}
  _NPROC_TEST=$(which nproc 2>&1)
  if [ -z "${_NPROC_TEST}" ]; then
    _CPU_NR="${_CPU_INFO}"
  else
    _CPU_NR=$(nproc 2>&1)
  fi
  _CPU_NR=${_CPU_NR//[^0-9]/}
  if [ ! -z "${_CPU_NR}" ] \
    && [ ! -z "${_CPU_INFO}" ] \
    && [ "${_CPU_NR}" -gt "${_CPU_INFO}" ] \
    && [ "${_CPU_INFO}" -gt "0" ]; then
    _CPU_NR="${_CPU_INFO}"
  fi
  if [ -z "${_CPU_NR}" ] || [ "${_CPU_NR}" -lt "1" ]; then
    _CPU_NR=1
  fi
}

load_control() {
  if [ -e "${barCnf}" ]; then
    source ${barCnf}
    _CPU_MAX_RATIO=${_CPU_MAX_RATIO//[^0-9]/}
  fi
  if [ -z "${_CPU_MAX_RATIO}" ]; then
    _CPU_MAX_RATIO=6
  fi
  _O_LOAD=$(awk '{print $1*100}' /proc/loadavg 2>&1)
  _O_LOAD=$(( _O_LOAD / _CPU_NR ))
  _O_LOAD_MAX=$(( 100 * _CPU_MAX_RATIO ))
}

up_action_all() {
  for User in `find /data/disk/ -maxdepth 1 | sort`; do
    count_cpu
    load_control
    if [ -d "${User}/config/server_master/nginx/vhost.d" ] \
      && [ -e "${User}/log/cores.txt" ] \
      && [ ! -e "${User}/log/CANCELLED" ]; then
      if [ "${_O_LOAD}" -lt "${_O_LOAD_MAX}" ]; then
        octUsr=$(echo ${User} | cut -d'/' -f4 | awk '{ print $1}')
        tocName="${octName}.${octUsr}"
        tocIncO="${filIncO}.${octUsr}"
        octCnf="/root/.${octUsr}.octopus.cnf"
        echo load is ${_O_LOAD} while maxload is ${_O_LOAD_MAX}
        echo Octopus upgrade for User ${User}
        n=$((RANDOM%9+2))
        echo Waiting $n seconds...
        sleep $n
        if [ "${silent}" = "log" ]; then
          _UP_LOG="${_LOG_DIR}/$(basename "$0")-up-${octUsr}-${_NOW}.log"
          echo
          echo "Preparing the upgrade in silent mode..."
          echo
          echo "NOTE: There will be no progress displayed in the console"
          echo "but you will receive an e-mail once the upgrade is complete"
          echo
          sleep 5
          echo "You could watch the progress in another window with command:"
          echo "  tail -f ${_UP_LOG}"
          echo "or wait until you will see the line: OCTOPUS upgrade completed"
          echo
          echo "Starting the upgrade in silent mode now..."
          echo
          if [ -e "${vBs}/${octName}" ]; then
            sed -i "s/^_SPINNER=YES/_SPINNER=NO/g"             ${vBs}/${octName}
          fi
          up_one >>${_UP_LOG} 2>&1
          check_report
        else
          up_one
        fi
        n=$((RANDOM%9+2))
        echo "Waiting $n seconds..."
        sleep $n
        rm -f ${vBs}/${tocName}
        rm -f ${vBs}/${tocIncO}
        echo "Done for ${User}"
      else
        echo "load is ${_O_LOAD} while maxload is ${_O_LOAD_MAX}"
        echo "...we have to wait..."
      fi
    fi
  done
}

up_action_one() {
  User="/data/disk/${second}"
  count_cpu
  load_control
  if [ -d "${User}/config/server_master/nginx/vhost.d" ] \
    && [ -e "${User}/log/cores.txt" ] \
    && [ ! -e "${User}/log/CANCELLED" ]; then
    if [ "${_O_LOAD}" -lt "${_O_LOAD_MAX}" ]; then
      octUsr="${second}"
      tocName="${octName}.${octUsr}"
      tocIncO="${filIncO}.${octUsr}"
      octCnf="/root/.${octUsr}.octopus.cnf"
      echo load is ${_O_LOAD} while maxload is ${_O_LOAD_MAX}
      echo Octopus upgrade for User ${User}
      sleep 3
      if [ "${silent}" = "log" ]; then
        _UP_LOG="${_LOG_DIR}/$(basename "$0")-up-${octUsr}-${_NOW}.log"
        echo
        echo "Preparing the upgrade in silent mode..."
        echo
        echo "NOTE: There will be no progress displayed in the console"
        echo "but you will receive an e-mail once the upgrade is complete"
        echo
        sleep 5
        echo "You could watch the progress in another window with command:"
        echo "  tail -f ${_UP_LOG}"
        echo "or wait until you will see the line: OCTOPUS upgrade completed"
        echo
        echo "Starting the upgrade in silent mode now..."
        echo
        if [ -e "${vBs}/${octName}" ]; then
          sed -i "s/^_SPINNER=YES/_SPINNER=NO/g"               ${vBs}/${octName}
        fi
        up_one >>${_UP_LOG} 2>&1
        check_report
      else
        up_one
      fi
      sleep 3
      rm -f ${vBs}/${tocName}
      rm -f ${vBs}/${tocIncO}
      echo Done for ${User}
    else
      echo load is ${_O_LOAD} while maxload is ${_O_LOAD_MAX}
      echo try again later
    fi
  fi
}

up_start() {
  if [ -e "/var/run/boa_run.pid" ]; then
    echo
    echo "  Another BOA installer is running probably"
    echo "  because /var/run/boa_run.pid exists"
    echo
    exit 1
  elif [ -e "/var/run/boa_wait.pid" ]; then
    echo
    echo "  Some important system task is running probably"
    echo "  because /var/run/boa_wait.pid exists"
    echo
    exit 1
  else
    touch /var/run/boa_run.pid
    touch /var/run/boa_wait.pid
    mkdir -p ${_LOG_DIR}
    cd ${vBs}
    rm -f ${vBs}/OCTOPUS.sh*
    ## rm -f ${vBs}/*.sh.cnf*
  fi
  if [ "${cmmode}" = "log" ]; then
    silent="${cmmode}"
  fi
  if [ ! -z "${cmmode}" ] && [ "${cmmode}" != "log" ]; then
    mcmode="${cmmode}"
  fi
  if [ -e "/opt/local/bin/php" ] || [ -e "/usr/local/bin/php" ]; then
    rm -f /opt/local/bin/php
    rm -f /usr/local/bin/php
  fi
  if [ "${cmmand}" = "up-cluster" ]; then
    if [ ! -e "/var/run/mysqld/mysqld.pid" ] \
      && [ ! -e "/root/.dbhd.clstr.cnf" ] \
      && [ -e "/etc/init.d/mysql" ]; then
      rm -f /root/.remote.db.cnf
      sleep 5
      service mysql start &> /dev/null
    fi
  fi
}

up_finish() {
  rm -f /root/BOA.sh*
  rm -f /var/run/boa_run.pid
  rm -f /var/run/boa_wait.pid
  rm -f /var/run/manage_ltd_users.pid
  rm -f /var/run/manage_rvm_users.pid
  rm -f ${vBs}/*.sh.cnf*
  rm -f ${vBs}/OCTOPUS.sh*
  if [ -e "/opt/local/bin/php" ] || [ -e "/usr/local/bin/php" ]; then
    rm -f /opt/local/bin/php
    rm -f /usr/local/bin/php
  fi
  rm -f -r /opt/tmp/*
  echo
  echo OCTOPUS upgrade completed
  echo Bye
  echo
  exit 0
}

up_head() {
  up_start
  curl ${crlGet} "${rgUrl}/${master}/${octName}"  -o ${vBs}/${octName}
  curl ${crlGet} "${rgUrl}/${master}/${pthIncO}"  -o ${vBs}/${filIncO}
  if [ "${second}" = "all" ]; then
    up_action_all
  else
    up_action_one
  fi
  up_finish
}

up_modern() {
  up_start
  curl ${crlGet} "${rgUrl}/${devel}/${octName}"   -o ${vBs}/${octName}
  curl ${crlGet} "${rgUrl}/${devel}/${pthIncO}"   -o ${vBs}/${filIncO}
  if [ "${second}" = "all" ]; then
    up_action_all
  else
    up_action_one
  fi
  up_finish
}

up_cluster() {
  up_start
  curl ${crlGet} "${rgUrl}/${cluster}/${octName}" -o ${vBs}/${octName}
  curl ${crlGet} "${rgUrl}/${cluster}/${pthIncO}" -o ${vBs}/${filIncO}
  if [ "${second}" = "all" ]; then
    up_action_all
  else
    up_action_one
  fi
  up_finish
}

up_stable() {
  up_start
  curl ${crlGet} "${rgUrl}/${stable}/${octName}"  -o ${vBs}/${octName}
  curl ${crlGet} "${rgUrl}/${stable}/${pthIncO}"  -o ${vBs}/${filIncO}
  if [ "${second}" = "all" ]; then
    up_action_all
  else
    up_action_one
  fi
  up_finish
}

up_legacy() {
  up_start
  curl ${crlGet} "${rgUrl}/${legacy}/${octName}"  -o ${vBs}/${octName}
  if [ "${second}" = "all" ]; then
    up_action_all
  else
    up_action_one
  fi
  up_finish
}

find_fast_mirror() {
  isNetc=$(which netcat 2>&1)
  if [ ! -x "${isNetc}" ] || [ -z "${isNetc}" ]; then
    apt-get update -qq &> /dev/null
    apt-get install netcat -y --force-yes --reinstall &> /dev/null
    sleep 3
  fi
  ffMirr=$(which ffmirror 2>&1)
  if [ -x "${ffMirr}" ]; then
    ffList="/var/backups/boa-mirrors.txt"
    mkdir -p /var/backups
    if [ ! -e "${ffList}" ]; then
      echo "jp.files.aegir.cc"  > ${ffList}
      echo "nl.files.aegir.cc" >> ${ffList}
      echo "uk.files.aegir.cc" >> ${ffList}
      echo "us.files.aegir.cc" >> ${ffList}
    fi
    if [ -e "${ffList}" ]; then
      _CHECK_MIRROR=$(bash ${ffMirr} < ${ffList} 2>&1)
      _USE_MIR="${_CHECK_MIRROR}"
      [[ "${_USE_MIR}" =~ "printf" ]] && _USE_MIR="files.aegir.cc"
    else
      _USE_MIR="files.aegir.cc"
    fi
  else
    _USE_MIR="files.aegir.cc"
  fi
  if ! netcat -w 10 -z "${_USE_MIR}" 80; then
    echo "INFO: The mirror ${_USE_MIR} doesn't respond, let's try default"
    _USE_MIR="files.aegir.cc"
  fi
  urlDev="http://${_USE_MIR}/dev"
  urlHmr="http://${_USE_MIR}/versions/master/aegir"
  urlStb="http://${_USE_MIR}/versions/stable"
}

check_dns_curl() {
  if [ ! -e "/etc/resolv.conf" ]; then
    if [ -e "${vBs}/resolv.conf.vanilla" ]; then
      cat ${vBs}/resolv.conf.vanilla >/etc/resolv.conf
    fi
    echo "nameserver 8.8.8.8" >>/etc/resolv.conf
    echo "nameserver 8.8.4.4" >>/etc/resolv.conf
    check_dns_settings
  else
    check_dns_settings
  fi
  if [ -d "/var/cache/pdnsd" ] \
    && [ -e "/etc/resolvconf/run/interface/lo.pdnsd" ]; then
    pdnsd-ctl empty-cache &> /dev/null
  fi
  find_fast_mirror
  isCurl=$(curl --version 2>&1)
  if [[ ! "$isCurl" =~ "OpenSSL" ]] || [ -z "${isCurl}" ]; then
    echo "ERROR: Required cURL package is not available"
    echo "ERROR: Please install it manually with 'apt-get install curl'"
    clean_pid_exit
  fi
  _CURL_TEST=$(curl -L -k -s \
    --max-redirs 10 \
    --retry 3 \
    --retry-delay 10 \
    -I "http://${_USE_MIR}" 2> /dev/null)
  if [[ ! "${_CURL_TEST}" =~ "200 OK" ]]; then
    echo "ERROR: ${_USE_MIR} is not available, please try later"
    clean_pid_exit
  fi
}

check_root() {
  if [ `whoami` = "root" ]; then
    chmod a+w /dev/null
    if [ ! -e "/dev/fd" ]; then
      if [ -e "/proc/self/fd" ]; then
        rm -rf /dev/fd
        ln -s /proc/self/fd /dev/fd
      fi
    fi
    sed -i "s/.*173.231.133.190.*//g" /etc/hosts
    sed -i "s/^127.0.0.1.*/127.0.0.1 localhost/g" /etc/hosts
    sed -i "s/.*files.aegir.cc.*//g" /etc/hosts
    echo >>/etc/hosts
    sed -i "/^$/d" /etc/hosts
  else
    echo "ERROR: This script should be ran as a root user"
    clean_pid_exit
  fi
  _DF_TEST=$(df -kTh / -l \
    | grep '/' \
    | sed 's/\%//g' \
    | awk '{print $6}' 2> /dev/null)
  _DF_TEST=${_DF_TEST//[^0-9]/}
  if [ ! -z "${_DF_TEST}" ] && [ "${_DF_TEST}" -gt "90" ]; then
    echo "ERROR: Your disk space is almost full - \
      we can not proceed until it is below 90/100"
    clean_pid_exit
  fi
}

case "$1" in
  up-head)   cmmand="$1"
             second="$2"
             cmmode="$3"
             silent="$4"
             check_root
             check_dns_curl
             up_head
  ;;
  up-modern) cmmand="$1"
             second="$2"
             cmmode="$3"
             silent="$4"
             check_root
             check_dns_curl
             up_modern
  ;;
  up-cluster) cmmand="$1"
             second="$2"
             cmmode="$3"
             silent="$4"
             check_root
             check_dns_curl
             up_cluster
  ;;
  up-stable) cmmand="$1"
             second="$2"
             cmmode="$3"
             silent="$4"
             check_root
             check_dns_curl
             up_stable
  ;;
  up-legacy) cmmand="$1"
             second="$2"
             cmmode="$3"
             silent="$4"
             check_root
             check_dns_curl
             up_legacy
  ;;
  *)         echo
             echo "Usage: $(basename "$0") {up-stable|up-head|up-legacy} {all|o1} {aegir|platforms|both}"
             echo
             clean_pid_exit
  ;;
esac
